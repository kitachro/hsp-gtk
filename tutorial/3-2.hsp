// コールバック関数を使うための準備
#include "hscallbk.as"
#uselib ""
#func cb_window_delete_event ""
#func cb_button_clicked ""

// GTK+の関数を使うための準備
#uselib "libgtk-3-0.dll"
#func global gtk_init "gtk_init" sptr, sptr
#func global gtk_window_new "gtk_window_new" int
#const	GTK_WINDOW_TOPLEVEL	0
#func global gtk_widget_show_all "gtk_widget_show_all" sptr
#func global gtk_main "gtk_main"
#func global gtk_main_quit "gtk_main_quit"
#func global gtk_button_new_with_label "gtk_button_new_with_label" sptr
#func global gtk_container_add "gtk_container_add" sptr, sptr

#uselib "libgobject-2.0-0.dll"
#define g_signal_connect(%1, %2, %3, %4) g_signal_connect_data %1, %2, %3, %4, 0, 0
#func global g_signal_connect_data "g_signal_connect_data" sptr, str, sptr, sptr, int, int
;#func global g_signal_handler_disconnect "g_signal_handler_disconnect" sptr, int 
;#func global g_signal_handlers_disconnect_matched "g_signal_handlers_disconnect_matched" sptr, int, int, int, sptr, sptr, sptr
;#const	G_SIGNAL_MATCH_FUNC	(1 << 3)

// ヌルポインタ定数
#const	NULL	0

	// GTK+初期化
	gtk_init	NULL, NULL

	// ウィンドウ生成
	gtk_window_new	GTK_WINDOW_TOPLEVEL
	win	= stat
	setcallbk	cbwindowdeleteevent, cb_window_delete_event, *on_window_delete_event
	g_signal_connect	win, "delete-event", varptr( cbwindowdeleteevent ), NULL

	// ボタン生成
	gtk_button_new_with_label	"Click Here"
	btn	= stat
	setcallbk	cbbuttonclicked, cb_button_clicked, *on_button_clicked
	g_signal_connect	btn, "clicked", varptr( cbbuttonclicked ), NULL
;	id = stat
;	g_signal_handler_disconnect btn, id
;	g_signal_handlers_disconnect_matched btn, G_SIGNAL_MATCH_FUNC, 0, 0, 0, varptr(cbbuttonclicked), 0

	// ウィンドウの組み立て
	gtk_container_add	win, btn

	// ウィンドウの表示とメインループの開始
	gtk_widget_show_all	win
	gtk_main
	end

/* シグナルハンドラ */
*on_window_delete_event
	gtk_main_quit
	return

*on_button_clicked
	mes	"Hello World"
	return
